#pragma once

#include "khg_gfx/texture.h"

#define ELEMENT_BUSH(n) ELEMENT_BUSH_##n
#define ELEMENT_DIRTPATCH(n) ELEMENT_DIRTPATCH_##n

#define FOREACH_TEXTURE(TEXTURE) \
  TEXTURE(NULL_TEXTURE)\
  TEXTURE(SQUARE)\
  TEXTURE(GROUND_GRASS)\
  TEXTURE(BORDER_BLACK)\
  TEXTURE(ELEMENT_BUSH(0)) TEXTURE(ELEMENT_BUSH(1)) TEXTURE(ELEMENT_BUSH(2)) TEXTURE(ELEMENT_BUSH(3)) TEXTURE(ELEMENT_BUSH(4)) TEXTURE(ELEMENT_BUSH(5)) TEXTURE(ELEMENT_BUSH(6)) TEXTURE(ELEMENT_BUSH(7)) TEXTURE(ELEMENT_BUSH(8)) TEXTURE(ELEMENT_BUSH(9))\
  TEXTURE(ELEMENT_BUSH(10)) TEXTURE(ELEMENT_BUSH(11)) TEXTURE(ELEMENT_BUSH(12)) TEXTURE(ELEMENT_BUSH(13)) TEXTURE(ELEMENT_BUSH(14)) TEXTURE(ELEMENT_BUSH(15)) TEXTURE(ELEMENT_BUSH(16)) TEXTURE(ELEMENT_BUSH(17)) TEXTURE(ELEMENT_BUSH(18)) TEXTURE(ELEMENT_BUSH(19))\
  TEXTURE(ELEMENT_BUSH(20)) TEXTURE(ELEMENT_BUSH(21)) TEXTURE(ELEMENT_BUSH(22)) TEXTURE(ELEMENT_BUSH(23)) TEXTURE(ELEMENT_BUSH(24)) TEXTURE(ELEMENT_BUSH(25)) TEXTURE(ELEMENT_BUSH(26)) TEXTURE(ELEMENT_BUSH(27)) TEXTURE(ELEMENT_BUSH(28)) TEXTURE(ELEMENT_BUSH(29))\
  TEXTURE(ELEMENT_BUSH(30)) TEXTURE(ELEMENT_BUSH(31)) TEXTURE(ELEMENT_BUSH(32)) TEXTURE(ELEMENT_BUSH(33)) TEXTURE(ELEMENT_BUSH(34)) TEXTURE(ELEMENT_BUSH(35)) TEXTURE(ELEMENT_BUSH(36)) TEXTURE(ELEMENT_BUSH(37)) TEXTURE(ELEMENT_BUSH(38)) TEXTURE(ELEMENT_BUSH(39))\
  TEXTURE(ELEMENT_BUSH(40)) TEXTURE(ELEMENT_BUSH(41)) TEXTURE(ELEMENT_BUSH(42)) TEXTURE(ELEMENT_BUSH(43)) TEXTURE(ELEMENT_BUSH(44)) TEXTURE(ELEMENT_BUSH(45)) TEXTURE(ELEMENT_BUSH(46)) TEXTURE(ELEMENT_BUSH(47)) TEXTURE(ELEMENT_BUSH(48)) TEXTURE(ELEMENT_BUSH(49))\
  TEXTURE(ELEMENT_BUSH(50)) TEXTURE(ELEMENT_BUSH(51)) TEXTURE(ELEMENT_BUSH(52)) TEXTURE(ELEMENT_BUSH(53)) TEXTURE(ELEMENT_BUSH(54)) TEXTURE(ELEMENT_BUSH(55)) TEXTURE(ELEMENT_BUSH(56)) TEXTURE(ELEMENT_BUSH(57)) TEXTURE(ELEMENT_BUSH(58)) TEXTURE(ELEMENT_BUSH(59))\
  TEXTURE(ELEMENT_DIRTPATCH(0)) TEXTURE(ELEMENT_DIRTPATCH(1)) TEXTURE(ELEMENT_DIRTPATCH(2)) TEXTURE(ELEMENT_DIRTPATCH(3)) TEXTURE(ELEMENT_DIRTPATCH(4)) TEXTURE(ELEMENT_DIRTPATCH(5)) TEXTURE(ELEMENT_DIRTPATCH(6)) TEXTURE(ELEMENT_DIRTPATCH(7)) TEXTURE(ELEMENT_DIRTPATCH(8)) TEXTURE(ELEMENT_DIRTPATCH(9))\
  TEXTURE(ELEMENT_DIRTPATCH(10)) TEXTURE(ELEMENT_DIRTPATCH(11)) TEXTURE(ELEMENT_DIRTPATCH(12)) TEXTURE(ELEMENT_DIRTPATCH(13)) TEXTURE(ELEMENT_DIRTPATCH(14)) TEXTURE(ELEMENT_DIRTPATCH(15)) TEXTURE(ELEMENT_DIRTPATCH(16)) TEXTURE(ELEMENT_DIRTPATCH(17)) TEXTURE(ELEMENT_DIRTPATCH(18)) TEXTURE(ELEMENT_DIRTPATCH(19))\
  TEXTURE(ELEMENT_DIRTPATCH(20)) TEXTURE(ELEMENT_DIRTPATCH(21)) TEXTURE(ELEMENT_DIRTPATCH(22)) TEXTURE(ELEMENT_DIRTPATCH(23)) TEXTURE(ELEMENT_DIRTPATCH(24)) TEXTURE(ELEMENT_DIRTPATCH(25)) TEXTURE(ELEMENT_DIRTPATCH(26)) TEXTURE(ELEMENT_DIRTPATCH(27)) TEXTURE(ELEMENT_DIRTPATCH(28)) TEXTURE(ELEMENT_DIRTPATCH(29))\
  TEXTURE(ELEMENT_DIRTPATCH(30)) TEXTURE(ELEMENT_DIRTPATCH(31)) TEXTURE(ELEMENT_DIRTPATCH(32)) TEXTURE(ELEMENT_DIRTPATCH(33)) TEXTURE(ELEMENT_DIRTPATCH(34)) TEXTURE(ELEMENT_DIRTPATCH(35)) TEXTURE(ELEMENT_DIRTPATCH(36)) TEXTURE(ELEMENT_DIRTPATCH(37)) TEXTURE(ELEMENT_DIRTPATCH(38)) TEXTURE(ELEMENT_DIRTPATCH(39))\
  TEXTURE(ELEMENT_DIRTPATCH(40)) TEXTURE(ELEMENT_DIRTPATCH(41)) TEXTURE(ELEMENT_DIRTPATCH(42)) TEXTURE(ELEMENT_DIRTPATCH(43)) TEXTURE(ELEMENT_DIRTPATCH(44)) TEXTURE(ELEMENT_DIRTPATCH(45)) TEXTURE(ELEMENT_DIRTPATCH(46)) TEXTURE(ELEMENT_DIRTPATCH(47)) TEXTURE(ELEMENT_DIRTPATCH(48)) TEXTURE(ELEMENT_DIRTPATCH(49))\
  TEXTURE(ELEMENT_DIRTPATCH(50)) TEXTURE(ELEMENT_DIRTPATCH(51)) TEXTURE(ELEMENT_DIRTPATCH(52)) TEXTURE(ELEMENT_DIRTPATCH(53)) TEXTURE(ELEMENT_DIRTPATCH(54)) TEXTURE(ELEMENT_DIRTPATCH(55)) TEXTURE(ELEMENT_DIRTPATCH(56)) TEXTURE(ELEMENT_DIRTPATCH(57)) TEXTURE(ELEMENT_DIRTPATCH(58)) TEXTURE(ELEMENT_DIRTPATCH(59))\
  TEXTURE(NUM_TEXTURES)

#define GENERATE_TEXTURE_ENUM(ENUM) ENUM,
#define GENERATE_TEXTURE_STRING(STRING) #STRING,

typedef enum {
  FOREACH_TEXTURE(GENERATE_TEXTURE_ENUM)
} texture_id;

#define TEXTURE_STRINGS (char *[]){ FOREACH_TEXTURE(GENERATE_TEXTURE_STRING) }
#define TEXTURE_STRINGS_SIZE sizeof(TEXTURE_STRINGS) / sizeof(TEXTURE_STRINGS[0])

typedef struct texture_asset {
  char tex_filepath[128];
  int tex_width;
  int tex_height;
} texture_asset;

const gfx_texture generate_texture(const char *filepath, const float width, const float height);
const bool check_texture_loaded(const unsigned int tex_id);
const unsigned int get_tex_id_from_string(const char *tex_key);

const gfx_texture get_or_add_texture(const unsigned int tex_id);
const gfx_texture get_or_add_texture_from_string(const char *tex_key);

void generate_textures(void);
void reset_textures(void);

